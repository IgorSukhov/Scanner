using System;
using System.IO;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Timers;
using System.Collections.Generic;
using System.Threading;
using System.Windows.Forms;

namespace ScannerV1
{
    class Scanner
    {
        #region States
        enum States
        {
            Idle,
            MovingToPoint,
            Calibrating
        }

        enum AxisCalStates
        {
            calIdle,
            MovingToZero,
            MovingFromZero,
            WaitAfterCal
        }
        #endregion

        #region Properties
        /// <summary>
        /// Была ли проведена инициализация
        /// </summary>
        public bool IsInited { get; private set; } = false;

        /// <summary>
        /// Показания концевика по оси X: true - не задет; false - задет
        /// </summary>
        public bool LimitX
        {
            get
            {
                return lx;
            }
        }

        /// <summary>
        /// Показания концевика по оси Y: true - не задет; false - задет
        /// </summary>
        public bool LimitY
        {
            get
            {
                return ly;
            }
        }

        /// <summary>
        /// Показания концевика по оси Z: true - не задет; false - задет
        /// </summary>
        public bool LimitZ
        {
            get
            {
                return lz;
            }
        }

        /// <summary>
        /// Показания концевика по оси A: true - не задет; false - задет
        /// </summary>
        public bool LimitA
        {
            get
            {
                return la;
            }
        }

        /// <summary>
        /// Текущая скорость по оси X
        /// </summary>
        public Int16 SpeedX
        {
            get
            {
                return ux;
            }
        }

        /// <summary>
        /// Текущая скорость по оси Y
        /// </summary>
        public Int16 SpeedY
        {
            get
            {
                return uy;
            }
        }

        /// <summary>
        /// Текущая скорость по оси Z
        /// </summary>
        public Int16 SpeedZ
        {
            get
            {
                return uz;
            }
        }

        /// <summary>
        /// Текущая скорость по оси A
        /// </summary>
        public Int16 SpeedA
        {
            get
            {
                return ua;
            }
        }


        /// <summary>
        /// Текущая координата по оси X
        /// </summary>
        public Int32 CoordX
        {
            get
            {
                return cx;
            }
        }

        /// <summary>
        /// Текущая координата по оси Y
        /// </summary>
        public Int32 CoordY
        {
            get
            {
                return cy;
            }
        }

        /// <summary>
        /// Текущая координата по оси Z
        /// </summary>
        public Int32 CoordZ
        {
            get
            {
                return cz;
            }
        }

        /// <summary>
        /// Текущая координата по оси A
        /// </summary>
        public Int32 CoordA
        {
            get
            {
                return ca;
            }
        }
        #endregion

        #region Fields
        UdpClient udpClient;
        System.Timers.Timer receiveTimer;
        System.Timers.Timer timer;
        byte[] coordCmdEnding;
        byte[] speedCmdEnding;
        byte[] accelCmdEnding;

        States state = States.Idle;

        List<byte[]> setupCmds;
        public UInt32 io_and_flag;
        Int32 cx, cy, cz, ca;
        Int16 ux, uy, uz, ua;
        bool lx, ly, lz, la;

        readonly double U = 2000;
        readonly double a = 7000;

        Int32 targetX;
        Int32 targetY;
        Int32 targetZ;
        Int32 targetA;

        Int32 moveToZeroSpeedX = -16384000;
        Int32 moveToZeroSpeedY = -16384000;
        Int32 moveToZeroSpeedZ = -16384000;
        Int32 moveToZeroSpeedA = -16384000;
        Int32 moveFromZeroSpeedX = 3276800;
        Int32 moveFromZeroSpeedY = 3276800;
        Int32 moveFromZeroSpeedZ = 3276800;
        Int32 moveFromZeroSpeedA = 3276800;

        readonly int calibrationTimerInterval = 10;
        readonly int moveToPositionTimerInterval = 10;
        readonly int receiveTimerInterval = 10;

        AxisCalStates calStateX = AxisCalStates.calIdle;
        AxisCalStates calStateY = AxisCalStates.calIdle;
        AxisCalStates calStateZ = AxisCalStates.calIdle;
        AxisCalStates calStateA = AxisCalStates.calIdle;

        UInt16 packetNum = 0xFFFF;

        public event EventHandler StatusUpdated;
        public event EventHandler CalibrationDone;
        public event EventHandler MoveToCoordinatesDone;
        public event EventHandler InitDone;

        string lastError;
        #endregion

        #region Default constructor
        public Scanner()
        {

        }
        #endregion

        #region States processing
        private void Timer_Elapsed(object sender, ElapsedEventArgs e)
        {
            switch (state)
            {
                case States.Idle:
                    {
                        break;
                    }
                case States.MovingToPoint:
                    {
                        Int32 xSpeed = GetMoveSpeed(targetX - cx);
                        Int32 ySpeed = GetMoveSpeed(targetY - cy);
                        Int32 zSpeed = GetMoveSpeed(targetZ - cz);
                        Int32 aSpeed = GetMoveSpeed(targetA - ca);
                        if ((xSpeed != 0) || (ySpeed != 0) || (zSpeed != 0) || (aSpeed != 0))
                        {
                            Move(xSpeed, ySpeed, zSpeed, aSpeed);
                        }
                        else
                        {
                            Stop();
                            state = States.Idle;
                            timer.Stop();
                            if (MoveToCoordinatesDone != null) MoveToCoordinatesDone.Invoke(this, null);
                        }
                        break;
                    }
                case States.Calibrating:
                    {
                        Calibration();
                        break;
                    }
                default:
                    {
                        return;
                    }
            }
        }

        Int32 GetMoveSpeed(Int32 dL)
        {
            double t2 = U / a;
            double L2 = t2 * U / 2;

            Int32 Uset;

            if (dL != 0)
            {
                Int32 dir = dL > 0 ? 1 : -1;
                if (Math.Abs(dL) < L2)
                {
                    Uset = (int)(dL / L2 * U);
                }
                else
                {
                    Uset = (int)(dir * U);
                }
            }
            else
            {
                Uset = 0;
            }
            return Uset << 14;
        }
        #endregion

        #region Calibration
        /// <summary>
        /// Запуск калибровки.
        /// </summary>
        /// <returns>В случае наличия других задач (движение на заданные координаты или уже проводится калибровка) возвращается false и калибровка не начинается. Иначе запускается калибровка и возвращается true</returns>
        public bool StartCalibration()
        {
            if (state == States.Idle)
            {
                SetCoordinates(209000, 205000, -201000, 190000);

                state = States.Calibrating;

                calStateX = AxisCalStates.MovingToZero;
                calStateY = AxisCalStates.MovingToZero;
                calStateZ = AxisCalStates.MovingToZero;
                calStateA = AxisCalStates.MovingToZero;

                timer.Stop();
                timer.Interval = calibrationTimerInterval;
                timer.Start();
                return true;
            }
            else
            {
                return false;
            }
        }

        void Calibration()
        {
            Int32 speedX = CalibrateAxis(ref calStateX, moveToZeroSpeedX, moveFromZeroSpeedX, !lx);
            Int32 speedY = CalibrateAxis(ref calStateY, moveToZeroSpeedY, moveFromZeroSpeedY, !ly);
            Int32 speedZ = CalibrateAxis(ref calStateZ, moveToZeroSpeedZ, moveFromZeroSpeedZ, !lz);
            Int32 speedA = CalibrateAxis(ref calStateA, moveToZeroSpeedA, moveFromZeroSpeedA, !la);

            if (calStateX == AxisCalStates.calIdle && calStateY == AxisCalStates.calIdle && calStateZ == AxisCalStates.calIdle && calStateA == AxisCalStates.calIdle)
            {
                Stop();
                state = States.Idle;
                SetCoordinates(0, 0, 0, 0);
                if (CalibrationDone != null) CalibrationDone.Invoke(this, null);
            }
            else
            {
                Move(speedX, speedY, -speedZ, speedA);
            }
        }

        Int32 CalibrateAxis(ref AxisCalStates calState, Int32 moveToZeroSpeed, Int32 moveFromZeroSpeed, bool axisLimit)
        {
            Int32 speed = 0;
            switch (calState)
            {
                case AxisCalStates.calIdle:
                    {
                        break;
                    }
                case AxisCalStates.MovingToZero:
                    {
                        if (axisLimit)
                        {
                            calState = AxisCalStates.MovingFromZero;
                            speed = 0;
                        }
                        else
                        {
                            speed = moveToZeroSpeed;
                        }
                        break;
                    }
                case AxisCalStates.MovingFromZero:
                    {
                        if (axisLimit)
                        {
                            speed = moveFromZeroSpeed;
                        }
                        else
                        {
                            calState = AxisCalStates.WaitAfterCal;
                            speed = 0;
                        }
                        break;
                    }
                case AxisCalStates.WaitAfterCal:
                    {
                        speed = 0;
                        calState = AxisCalStates.calIdle;
                        break;
                    }
            }
            return speed;
        }

        #endregion

        #region UDP processing
        private void ReceiveTimer_Elapsed(object sender, ElapsedEventArgs e)
        {
            if (udpClient.Available > 0)
            {
                IPEndPoint RemoteIpEndPoint = new IPEndPoint(IPAddress.Any, 0);
                byte[] receiveBytes = udpClient.Receive(ref RemoteIpEndPoint);
                if (receiveBytes.Length != 68) return;

                BinaryReader reader = new BinaryReader(new MemoryStream(receiveBytes), Encoding.ASCII);

                UInt16 packNum = reader.ReadUInt16();
                io_and_flag = reader.ReadUInt32();
                cx = reader.ReadInt32();
                cy = reader.ReadInt32();
                cz = reader.ReadInt32();
                ca = reader.ReadInt32();
                Int32 cb = reader.ReadInt32();
                Int32 cc = reader.ReadInt32();
                reader.ReadInt32();
                reader.ReadInt32();
                reader.ReadInt32();
                ux = reader.ReadInt16();
                uy = reader.ReadInt16();
                uz = reader.ReadInt16();
                ua = reader.ReadInt16();

                byte limStatus = (byte)((io_and_flag >> 1) & 0xFF);
                lx = (limStatus & 1) > 0;
                ly = (limStatus & 4) > 0;
                lz = (limStatus & 8) > 0;
                la = (limStatus & 2) > 0;

                if (StatusUpdated != null) StatusUpdated.Invoke(this, null);
            }
        }

        void SendMessage(byte[] message)
        {
            List<byte> qb = new List<byte>();
            qb.Add((byte)(packetNum & 0xFF));
            qb.Add((byte)((packetNum >> 8) & 0xFF));
            qb.AddRange(message);

            udpClient.Send(qb.ToArray(), qb.Count);

            ++packetNum;
        }
        #endregion

        #region Scanner commands
        /// <summary>
        /// Инициализация сканера: подключение к UDP порту и настройка сканера
        /// </summary>
        /// <param name="ipAddress">IP адрес компьютера. Должен начинаться на 192.168.10.X</param>
        /// <returns>IP адрес данного компьютера. Нужно обеспечить, чтобы компьютер находился в той же подсети, что и сканер</returns>
        public bool Init(string ipAddress)
        {
            if (IsInited) return true;

            IPAddress pcIpAddress;
            try
            {
                pcIpAddress = IPAddress.Parse(ipAddress);
            }
            catch (Exception e)
            {
                lastError = e.Message;
                return false;
            }

            byte[] pcIpAddressBytes = pcIpAddress.GetAddressBytes();
            if (pcIpAddressBytes[0] != 192 || pcIpAddressBytes[1] != 168 || pcIpAddressBytes[2] != 10)
            {
                lastError = "Wrong IP address. IP address must start: 192.168.10.X";
                return false;
            }

            try
            {
                udpClient = new UdpClient(new IPEndPoint(IPAddress.Parse(ipAddress), 27016));
            }
            catch (Exception e)
            {
                lastError = e.Message;
                return false;
            }

            udpClient.Connect(IPAddress.Parse("192.168.10.55"), 27016);
            receiveTimer = new System.Timers.Timer();
            receiveTimer.Elapsed += ReceiveTimer_Elapsed;
            receiveTimer.Interval = receiveTimerInterval;
            receiveTimer.Start();

            #region Arrays initialization
            //coordCmdEnding = initByteArrayByFile("coordCmdEnding.txt");
            coordCmdEnding = new byte[] {
            0x0, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x18, 0x77,
            0xbd, 0x1b, 0xd5, 0x97, 0x20, 0xd0, 0x9e, 0x4,
            0xff, 0xff, 0xff, 0xff, 0x0, 0xe9, 0x46, 0x0,
            0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0 };

            //speedCmdEnding = initByteArrayByFile("speedCmdEnding.txt");
            speedCmdEnding = new byte[] {
                0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
                0x60, 0xc2, 0x44, 0x05, 0x20, 0x9b, 0x42, 0x00,
                0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00 };
            //accelCmdEnding = initByteArrayByFile("accelCmdEnding.txt");
            accelCmdEnding = new byte[] {
                0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
                0x60, 0xc2, 0x44, 0x05, 0x20, 0x9b, 0x42, 0x00,
                0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00 };

            //setupCmds = setCmdsByFile("setupCommands.txt");
            setupCmds = new List<byte[]>();
            setupCmds.Add(new byte[] { 0x27, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x5e, 0x53, 0x7, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x3, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0xfa, 0x18, 0x0, 0x50, 0x98, 0x5a, 0x75, 0x3a, 0x4f, 0x13, 0x8d });
            setupCmds.Add(new byte[] { 0x27, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x5e, 0x53, 0x7, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x3, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0xfa, 0x18, 0x0, 0x50, 0x98, 0x5a, 0x75, 0x3a, 0x4f, 0x13, 0x8d });
            setupCmds.Add(new byte[] { 0x9, 0x0, 0x0, 0x80, 0xd8, 0x1a, 0x0, 0x0, 0xd8, 0x1a, 0x0, 0x0, 0xd8, 0x1a, 0x0, 0x0, 0xcb, 0x23, 0x0, 0x0, 0x3e, 0x0b, 0x1, 0x0, 0x26, 0x2, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x70, 0x3e, 0xe1, 0x6, 0x6, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x3, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x70, 0x3e, 0xe1, 0x6, 0x6, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x19, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x59, 0x75, 0xfe, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x6, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0xff, 0xff, 0xff, 0xff, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x9, 0x0, 0x0, 0x80, 0xd8, 0x1a, 0x0, 0x0, 0xd8, 0x1a, 0x0, 0x0, 0xd8, 0x1a, 0x0, 0x0, 0xcb, 0x23, 0x0, 0x0, 0x3e, 0x0b, 0x1, 0x0, 0x26, 0x2, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x70, 0x3e, 0xe1, 0x6, 0x6, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x0a, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x59, 0x75, 0xfe, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x6, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x0a, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x59, 0x75, 0xfe, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x6, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
            setupCmds.Add(new byte[] { 0x0, 0x0, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
            setupCmds.Add(new byte[] { 0x20, 0x0, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
            setupCmds.Add(new byte[] { 0x20, 0x0, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
            setupCmds.Add(new byte[] { 0x20, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
            setupCmds.Add(new byte[] { 0x20, 0x0, 0x0, 0x80, 0x5, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
            setupCmds.Add(new byte[] { 0x20, 0x0, 0x0, 0x80, 0x5, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
            setupCmds.Add(new byte[] { 0x20, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
            setupCmds.Add(new byte[] { 0x16, 0x0, 0x0, 0x80, 0x0, 0x20, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x17, 0x0, 0x0, 0x80, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x1f, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x14, 0x0, 0x0, 0x80, 0x2, 0x29, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x0d, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x58, 0x6c, 0x10, 0xaa, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x2a, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x59, 0x75, 0xa6, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0xff, 0xff, 0xff, 0xff, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x2d, 0x0, 0x0, 0x80, 0x0a, 0x0, 0x0, 0x0, 0x0a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x35, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xea, 0xfc, 0xff, 0x0, 0x12, 0xfd, 0xff, 0x72, 0xd4, 0xfd, 0xff, 0x60, 0x79, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x36, 0x0, 0x0, 0x80, 0x50, 0x34, 0x3, 0x0, 0xb0, 0x24, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0x2, 0x0, 0x8e, 0x2b, 0x2, 0x0, 0xa0, 0x86, 0x1, 0x0, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x32, 0x0, 0x0, 0x80, 0xc8, 0x0, 0x0, 0x0, 0xc8, 0x0, 0x0, 0x0, 0xb8, 0xeb, 0xfc, 0xff, 0x0b, 0x13, 0xfd, 0xff, 0x0, 0xda, 0xfd, 0xff, 0x48, 0x7d, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x33, 0x0, 0x0, 0x80, 0x88, 0x33, 0x3, 0x0, 0xe8, 0x23, 0x3, 0x0, 0x38, 0xff, 0xff, 0xff, 0xf5, 0xec, 0x2, 0x0, 0x0, 0x26, 0x2, 0x0, 0xb8, 0x82, 0x1, 0x0, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x64, 0x0, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x0, 0x26, 0x2, 0x0, 0xb8, 0x82, 0x1, 0x0, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0xfe, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0xfd, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0xfc, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0xfb, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0xfa, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x37, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xf8, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xf8, 0x40, 0xff, 0xff, 0xff, 0xff, 0x0, 0x6a, 0xf8, 0xc0, 0x34, 0x0, 0x0, 0x80, 0x80, 0x3e, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x7c, 0xc2, 0xfc, 0x76, 0xc7, 0x2c, 0x59, 0x75, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x16, 0x0, 0x0, 0x80, 0x0, 0x20, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x3b, 0x0, 0x0, 0x80, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x59, 0x75, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x3b, 0x0, 0x0, 0x80, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x59, 0x75, 0x9a, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x41, 0x0, 0x0, 0x80, 0x0, 0x0, 0x48, 0x43, 0x0, 0x0, 0x48, 0x43, 0x0, 0x0, 0x48, 0x43, 0x55, 0x55, 0x85, 0x43, 0x1c, 0xc7, 0xb1, 0x44, 0x0, 0x0, 0x7a, 0x44, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x42, 0x0, 0x0, 0x80, 0x0, 0x0, 0xc8, 0x40, 0x0, 0x0, 0xc8, 0x40, 0xf8, 0x53, 0x85, 0x40, 0x10, 0x58, 0x5, 0x40, 0x0, 0x0, 0x20, 0x40, 0xcd, 0xcc, 0xcc, 0x3e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x43, 0x0, 0x0, 0x80, 0x0, 0x0, 0x7a, 0x43, 0x0, 0x0, 0x7a, 0x43, 0x0, 0x0, 0x7a, 0x43, 0x0, 0x0, 0x7a, 0x43, 0x0, 0x0, 0xaf, 0x43, 0x0, 0x0, 0x80, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x49, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x43, 0x0, 0x0, 0x7a, 0x43, 0x0, 0x0, 0xaf, 0x43, 0x0, 0x0, 0x80, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x4c, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x43, 0x0, 0x0, 0x7a, 0x43, 0x0, 0x0, 0xaf, 0x43, 0x0, 0x0, 0x80, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x0a, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x59, 0x75, 0x9e, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x8, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x9, 0x0, 0x0, 0x80, 0xd8, 0x1a, 0x0, 0x0, 0xd8, 0x1a, 0x0, 0x0, 0xd8, 0x1a, 0x0, 0x0, 0xcb, 0x23, 0x0, 0x0, 0x3e, 0x0b, 0x1, 0x0, 0x26, 0x2, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x70, 0x3e, 0xe1, 0x6, 0x60, 0xc2, 0x44, 0x5, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x3, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x70, 0x3e, 0xe1, 0x6, 0x60, 0xc2, 0x44, 0x5, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x16, 0x0, 0x0, 0x80, 0x0, 0x20, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x60, 0xc2, 0x44, 0x5, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x17, 0x0, 0x0, 0x80, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x60, 0xc2, 0x44, 0x5, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x1f, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x60, 0xc2, 0x44, 0x5, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x14, 0x0, 0x0, 0x80, 0x2, 0x29, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x60, 0xc2, 0x44, 0x5, 0x20, 0x9b, 0x42, 0x0, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x0d, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x58, 0x6c, 0x10, 0x8e, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x60, 0xc2, 0x44, 0x5, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            setupCmds.Add(new byte[] { 0x0a, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x58, 0x6c, 0x10, 0x8e, 0x9b, 0x52, 0xf8, 0x70, 0x3e, 0xe1, 0x6, 0x60, 0xc2, 0x44, 0x5, 0xff, 0xff, 0xff, 0xff, 0x24, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
            #endregion

            timer = new System.Timers.Timer();
            timer.Elapsed += Timer_Elapsed;
            timer.Stop();

            Setup();
            IsInited = true;
            return true;
        }

        void Setup()
        {
            if (IsInited == true) return;
            for (int i = 0; i < 10; ++i)
            {
                SendMessage(setupCmds[i]);
                Thread.Sleep(10);
            }

            packetNum = 0;

            for (int i = 10; i < setupCmds.Count; ++i)
            {
                SendMessage(setupCmds[i]);
                Thread.Sleep(10);
            }
            IsInited = true;
            if (InitDone != null) InitDone.Invoke(this, null);
        }

        /// <summary>
        /// Остановка работы сканера. Необходимо выполнять при завершении работы со сканером.
        /// </summary>
        public void Close()
        {
            Stop();
            receiveTimer.Stop();
            timer.Stop();
        }

        /// <summary>
        /// Остановка всех задач сканера, включая движение.
        /// </summary>
        public void Stop()
        {
            timer.Stop();
            state = States.Idle;
            SetAcceleration();
            SetSpeed(0, 0, 0, 0);
        }

        /// <summary>
        /// Информация по последней возникшей ошибке.
        /// </summary>
        /// <returns>Возвращается строка с описанием ошибки</returns>
        public string LastError()
        {
            return lastError;
        }

        public void SetCoordinates_mm(Int32 Xmm, Int32 Ymm, Int32 Zmm, Int32 Amm)
        {
            SetCoordinates(Xmm * 200, Ymm * 200, Zmm * 200, Amm * 200);
        }

        /// <summary>
        /// Установка текущих координат без движения сканера. Координаты в шагах двигателя.
        /// </summary>
        /// <param name="X">Коорднината по X</param>
        /// <param name="Y">Коорднината по Y</param>
        /// <param name="Z">Коорднината по Z</param>
        /// <param name="A">Коорднината по A</param>
        public void SetCoordinates(Int32 X, Int32 Y, Int32 Z, Int32 A)
        {
            Int32[] coords = new Int32[] { X, Y, Z, A };
            for (int i = 0; i < 4; ++i)
            {
                List<byte> qb = new List<byte>();
                UInt32 h1 = 0x80000001;
                qb.AddRange(BitConverter.GetBytes(h1));
                qb.AddRange(BitConverter.GetBytes((UInt32)i));
                qb.AddRange(BitConverter.GetBytes(coords[i]));
                qb.AddRange(coordCmdEnding);
                SendMessage(qb.ToArray());
            }
        }

        /// <summary>
        /// Установка скорости движения по осям. При выполнении метода сканер начинает движение с заданными скоростями.
        /// </summary>
        /// <param name="speedX">Скорость по оси X</param>
        /// <param name="speedY">Скорость по оси Y</param>
        /// <param name="speedZ">Скорость по оси Z</param>
        /// <param name="speedA">Скорость по оси A</param>
        public void Move(Int32 speedX, Int32 speedY, Int32 speedZ, Int32 speedA)
        {
            SetAcceleration();
            SetSpeed(speedX, speedY, speedZ, speedA);
        }

        void SetAcceleration(UInt32 accX = 6872, UInt32 accY = 6872, UInt32 accZ = 6872, UInt32 accA = 9163)
        {
            List<byte> qb = new List<byte>();
            UInt32 h1 = 0x80000009;
            qb.AddRange(BitConverter.GetBytes(h1));

            UInt32 accB = 68414;
            UInt32 accC = 550;

            qb.AddRange(BitConverter.GetBytes(accX));
            qb.AddRange(BitConverter.GetBytes(accY));
            qb.AddRange(BitConverter.GetBytes(accZ));
            qb.AddRange(BitConverter.GetBytes(accA));
            qb.AddRange(BitConverter.GetBytes(accB));
            qb.AddRange(BitConverter.GetBytes(accC));

            qb.AddRange(accelCmdEnding);
            SendMessage(qb.ToArray());
        }

        void SetSpeed(Int32 speedX, Int32 speedY, Int32 speedZ, Int32 speedA)
        {
            List<byte> qb = new List<byte>();

            UInt32 h1 = 0x80000003;
            qb.AddRange(BitConverter.GetBytes(h1));
            Int32 dummySpeed = 0;

            qb.AddRange(BitConverter.GetBytes(speedX));
            qb.AddRange(BitConverter.GetBytes(speedY));
            qb.AddRange(BitConverter.GetBytes(speedZ));
            qb.AddRange(BitConverter.GetBytes(speedA));
            qb.AddRange(BitConverter.GetBytes(dummySpeed));
            qb.AddRange(BitConverter.GetBytes(dummySpeed));

            qb.AddRange(speedCmdEnding);
            SendMessage(qb.ToArray());
        }

        public bool MoveToCoordinates_mm(Int32 Xmm, Int32 Ymm, Int32 Zmm, Int32 Amm)
        {
            return MoveToCoordinates(Xmm * 200, Ymm * 200, Zmm * 200, Amm * 200);
        }

        /// <summary>
        /// Движение сканера на заданные координаты. После выполнения метода сканер начинает движение на заданные координаты. Метод не блокирующий. После выполнения команды запускается событие MoveToCoordinatesDone.
        /// </summary>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="Z"></param>
        /// <param name="A"></param>
        /// <returns>В случае корректных входных данных и отсутствии других задач сканера (движение на другие координаты и калибровка) возвращается true, иначе false</returns>
        public bool MoveToCoordinates(Int32 X, Int32 Y, Int32 Z, Int32 A)
        {
            if (X < 0 || X > 200000 || Y < 0 || Y > 200000 || Z < -200000 || Z > 0 || A < -192000 || A > 192000) return false;
            if (state != States.Idle) return false;
            state = States.MovingToPoint;
            targetX = X;
            targetY = Y;
            targetZ = Z;
            targetA = A;
            timer.Stop();
            timer.Interval = moveToPositionTimerInterval;
            timer.Start();
            return true;
        }
        #endregion
    }
}
